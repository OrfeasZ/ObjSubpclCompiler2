program test;
	var animals : array[3] of $Animal;

	procedure CreateAnimals(dogAge, catAge, tortAge : real);
	begin
		animals[0] := new Dog(dogAge);
		animals[1] := new Cat(catAge);
		animals[2] := new Tortoise(tortAge);
	end;

	procedure PrintAnimals();
	var printer : AnimalPrinter();
	begin
		printer.print(animals);
	end;

	class Animal
	var age : real;
		humanAge : real;
		type : integer;
	begin
		procedure constructor(animalAge : real);
		begin
			age := animalAge;
		end;

		abstract procedure calculateType();

		dynamic procedure calculateHumanAge();
		begin
			humanAge := age;
		end;
	end;

	class Dog extends Animal
	begin
		procedure constructor(animalAge : real);
		begin
			(* Call base constructor *)
			super.ctor(animalAge);
		end;

		procedure calculateType();
		begin
			type := 1;
		end;

		dynamic procedure calculateHumanAge();
		begin
			(* Average human lifespan is 75 years *)
			(* Average dog lifespan is 12 years *)
			humanAge := (age / 12.0) * 75.0;
		end;
	end;

	class Cat extends Animal
	begin
		procedure constructor(animalAge : real);
		begin
			(* Call base constructor *)
			super.ctor(animalAge);
		end;

		procedure calculateType();
		begin
			type := 2;
		end;

		dynamic procedure calculateHumanAge();
		begin
			(* Average human lifespan is 75 years *)
			(* Average cat lifespan is 16 years *)
			humanAge := (age / 16.0) * 75.0;
		end;
	end;

	class Tortoise extends Animal
	begin
		procedure constructor(animalAge : real);
		begin
			(* Call base constructor *)
			super.ctor(animalAge);
		end;

		procedure calculateType();
		begin
			type := 3;
		end;

		(* Tortoises have the same average lifespan as humans, so we don't need to override anything here *)
	end;

	class AnimalPrinter
	begin
		procedure constructor();
		begin
		end;

		procedure print(animalArray : array[3] of $Animal);
		var count : integer;
		begin
			count := 0;
			while count < 3 do
			begin
				printAnimal(animalArray[count]);
				count := count + 1;
			end;
		end;

		procedure printAnimal(animal : $Animal);
		begin
			(* Calculate the animal type *)
			animal.calculateType();

			if animal.type = 0 then
				return;

			(* Calculate the animal human age *)
			animal.calculateHumanAge();

			(* Print animal details *)
			PrintOut(animal.type);
			PrintOut(animal.age);
			PrintOut(animal.humanAge);
		end;
	end;

	begin
		CreateAnimals(5, 4, 37);
		PrintAnimals();
	end
.
