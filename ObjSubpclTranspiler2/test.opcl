program something;
	var animals : array[3] of $Animal;
		printer : AnimalPrinter();

	procedure CreateAnimals(dogAge, catAge, tortAge : real);
	begin
		animals[0] := new Dog(dogAge);
		animals[1] := new Cat(catAge);
		animals[2] := new Tortoise(catAge);
	end;

	class Animal
	var age : real;
		humanAge : real;
		type : integer;
	begin
		procedure constructor(animalAge : real);
		begin
			age := animalAge;
		end;

		abstract procedure getType();

		dynamic procedure calculateHumanAge();
		begin
			humanAge := age;
		end;
	end;

	class Dog extends Animal
	begin
		procedure constructor(animalAge : real);
		begin
			/* Call base constructor */
			super.ctor(animalAge);
		end;

		procedure getType();
		begin
			type := 1;
		end;

		dynamic procedure calculateHumanAge();
		begin
			/* Average human lifespan is 75 years */
			/* Average dog lifespan is 12 years */
			humanAge := (age / 12.0) * 75.0;
		end;
	end;

	class Cat extends Animal
	begin
		procedure constructor(animalAge : real);
		begin
			/* Call base constructor */
			super.ctor(animalAge);
		end;

		procedure getType();
		begin
			type := 2;
		end;

		dynamic procedure calculateHumanAge();
		begin
			/* Average human lifespan is 75 years */
			/* Average cat lifespan is 16 years */
			humanAge := (age / 16.0) * 75.0;
		end;
	end;

	class Tortoise extends Animal
	begin
		procedure constructor(animalAge : real);
		begin
			/* Call base constructor */
			super.ctor(animalAge);
		end;

		procedure getType();
		begin
			type := 3;
		end;

		/* Tortoises have the same average lifespan as humans, so we don't need to override anything here */
	end;

	class AnimalPrinter
	begin
		procedure constructor();
		begin
		end;

		procedure print(animal : $Animal);
		begin
			PrintOut(animal.type);
			PrintOut(animal.age);
			PrintOut(animal.humanAge);
		end;
	end;

	begin
		CreateAnimals();
		
		printer.print(animals[0]);
		printer.print(animals[1]);
		printer.print(animals[2]);
	end
.
